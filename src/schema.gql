# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Student {
  id: Int!
  firstName: String!
  lastName: String!
  dateOfBirth: DateTime!
  gender: Gender!
  email: String!
  phone: String
  address: String
  group: Group
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""The gender (male, female)"""
enum Gender {
  MALE
  FEMALE
}

type Appointment {
  id: Int!
  startTime: String!
  endTime: String!
  description: String
  day: WeekDay!
  period: TimePeriod!
  teacherShareds: [TeacherShared!]
}

"""أيام الأسبوع من الأحد إلى السبت"""
enum WeekDay {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

"""حدد الفترة الزمنية: صباحية (AM) أو مسائية (PM)"""
enum TimePeriod {
  AM
  PM
}

type StudyMaterial {
  id: Int!
  name: String!
  teacherShareds: [TeacherShared!]
}

type Teacher {
  id: Int!
  firstName: String!
  lastName: String!
  address: String!
  email: String!
  phone: String!
  teacherShareds: [TeacherShared!]
}

type TeacherShared {
  id: Int!
  appointmentId: Int!
  teacherId: Int
  groupId: Int!
  studyMaterialId: Int!
  studyMaterial: StudyMaterial
  group: Group
  teacher: Teacher
  appointment: Appointment
}

type Group {
  id: Int!
  name: String!
  classLevelId: Int!
  classLevel: ClassLevel
  students: [Student!]
  teacherShareds: [TeacherShared!]
}

type ClassLevel {
  createdAt: String!
  updatedAt: String!
  id: Int!
  name: String!
  groups: [Group!]
}

type PaginationMetadata {
  total: Int
  currentPage: Int
  itemsPerPage: Int
  totalPages: Int
}

type ClassLevelPaginationResultOutput {
  items: [ClassLevel!]!
  meta: PaginationMetadata!
}

type DoneResponseOutput {
  done: Boolean!
}

type StudyMaterialPaginationResultOutput {
  items: [StudyMaterial!]!
  meta: PaginationMetadata!
}

type GroupPaginationResultOutput {
  items: [Group!]!
  meta: PaginationMetadata!
}

type StudentPaginationResultOutput {
  items: [Student!]!
  meta: PaginationMetadata!
}

type AppointmentPaginationResultOutput {
  items: [Appointment!]!
  meta: PaginationMetadata!
}

type TeacherSharedPaginationResultOutput {
  items: [TeacherShared!]!
  meta: PaginationMetadata!
}

type TeacherPaginationResultOutput {
  items: [Teacher!]!
  meta: PaginationMetadata!
}

type Query {
  classLevels(filter: findAllClassLevelInput!): ClassLevelPaginationResultOutput!
  classLevel(id: Int!): ClassLevel!
  studyMaterials(filter: FindAllStudyMaterialInput!): StudyMaterialPaginationResultOutput!
  studyMaterial(id: Int!): StudyMaterial!
  groups(filter: FindAllGroupInput!): GroupPaginationResultOutput!
  group(id: Int!): Group!
  students(filter: FindAllStudentInput!): StudentPaginationResultOutput!
  student(id: Int!): Student!
  appointments(filter: FindAllAppointmentInput!): AppointmentPaginationResultOutput!
  appointment(id: Int!): Appointment!
  teacherShareds(filter: FindAllTeacherSharedInput!): TeacherSharedPaginationResultOutput!
  teacherShared(id: Int!): TeacherShared!
  teachers(filter: FindAllTeacherInput!): TeacherPaginationResultOutput!
  teacher(id: Int!): Teacher!
}

input findAllClassLevelInput {
  name: MatchInput
  pagination: PaginationInput!
  sort: SortInput
}

input MatchInput {
  value: String!
  op: String!
}

input PaginationInput {
  limit: Int!
  page: Int!
}

input SortInput {
  by: String!
  type: String!
}

input FindAllStudyMaterialInput {
  pagination: PaginationInput!
  sort: SortInput
  name: MatchInput
}

input FindAllGroupInput {
  name: MatchInput
  pagination: PaginationInput!
  sort: SortInput
}

input FindAllStudentInput {
  name: MatchInput
  firstName: MatchInput
  lastName: MatchInput
  dateOfBirth: MatchInput
  gender: MatchInput
  email: MatchInput
  phone: MatchInput
  address: MatchInput
  pagination: PaginationInput!
  sort: SortInput
}

input FindAllAppointmentInput {
  pagination: PaginationInput!
  sort: SortInput
  period: MatchInput
}

input FindAllTeacherSharedInput {
  pagination: PaginationInput!
  sort: SortInput
}

input FindAllTeacherInput {
  pagination: PaginationInput!
  sort: SortInput
  lastName: MatchInput
  address: MatchInput
}

type Mutation {
  createClassLevel(createClassLevelInput: CreateClassLevelInput!): ClassLevel!
  updateClassLevel(updateClassLevelInput: UpdateClassLevelInput!): ClassLevel!
  removeClassLevel(id: Int!): DoneResponseOutput!
  createStudyMaterial(createStudyMaterialInput: CreateStudyMaterialInput!): StudyMaterial!
  updateStudyMaterial(updateStudyMaterialInput: UpdateStudyMaterialInput!): StudyMaterial!
  removeStudyMaterial(id: Int!): DoneResponseOutput!
  createGroup(createGroupInput: CreateGroupInput!): Group!
  updateGroup(updateGroupInput: UpdateGroupInput!): Group!
  removeGroup(id: Int!): DoneResponseOutput!
  createStudent(createStudentInput: CreateStudentInput!): Student!
  updateStudent(updateStudentInput: UpdateStudentInput!): Student!
  removeStudent(id: Int!): DoneResponseOutput!
  createAppointment(createAppointmentInput: CreateAppointmentInput!): Appointment!
  updateAppointment(updateAppointmentInput: UpdateAppointmentInput!): Appointment!
  removeAppointment(id: Int!): Appointment!
  createTeacherShared(createTeacherSharedInput: CreateTeacherSharedInput!): TeacherShared!
  updateTeacherShared(updateTeacherSharedInput: UpdateTeacherSharedInput!): TeacherShared!
  removeTeacherShared(id: Int!): DoneResponseOutput!
  createTeacher(createTeacherInput: CreateTeacherInput!): Teacher!
  updateTeacher(updateTeacherInput: UpdateTeacherInput!): Teacher!
  removeTeacher(id: Int!): DoneResponseOutput!
}

input CreateClassLevelInput {
  name: String!
}

input UpdateClassLevelInput {
  name: String
  id: Int!
}

input CreateStudyMaterialInput {
  name: String!
}

input UpdateStudyMaterialInput {
  name: String
  id: Int!
}

input CreateGroupInput {
  name: String!
  classLevelId: Int!
}

input UpdateGroupInput {
  name: String
  classLevelId: Int
  id: Int!
}

input CreateStudentInput {
  firstName: String!
  lastName: String!
  dateOfBirth: DateTime!
  gender: Gender!
  email: String!
  phone: String!
  address: String!
  groupId: Int
}

input UpdateStudentInput {
  firstName: String
  lastName: String
  dateOfBirth: DateTime
  gender: Gender
  email: String
  phone: String
  address: String
  groupId: Int
  id: Int!
}

input CreateAppointmentInput {
  startTime: String!
  endTime: String!
  description: String!
  period: TimePeriod!
  day: WeekDay!
}

input UpdateAppointmentInput {
  startTime: String
  endTime: String
  description: String
  period: TimePeriod
  day: WeekDay
  id: Int!
}

input CreateTeacherSharedInput {
  appointmentId: Int!
  groupId: Int!
  studyMaterialId: Int!
  teacherId: Int
}

input UpdateTeacherSharedInput {
  appointmentId: Int
  groupId: Int
  studyMaterialId: Int
  teacherId: Int
  id: Int!
}

input CreateTeacherInput {
  firstName: String!
  lastName: String!
  address: String!
  email: String!
  phone: String!
  teacherShareds: [CreateTeacherSharedInput!]!
}

input UpdateTeacherInput {
  firstName: String
  lastName: String
  address: String
  email: String
  phone: String
  teacherShareds: [CreateTeacherSharedInput!]
  id: Int!
}